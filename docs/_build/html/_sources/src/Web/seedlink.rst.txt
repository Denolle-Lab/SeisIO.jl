********
SeedLink
********

`SeedLink <https://www.seiscomp3.org/wiki/doc/applications/seedlink>`_ is a TCP/IP-based data transmission protocol that allows near-real-time access to data from thousands of geophysical monitoring instruments. See :ref:`data keywords list <dkw>` and :ref:`channel id syntax <cid>` for options.

.. function:: SeedLink!(S, chans, KWs)
.. function:: SeedLink!(S, chans, patts, KWs)
.. function:: S = SeedLink(chans, KWs)

Initiate a SeedLink session in DATA mode to feed data from channels ``chans`` with
selection patterns ``patts`` to SeisData structure ``S``. A handle to a TCP
connection is appended to ``S.c``.Data are periodically parsed until the
connection is closed. One SeisData object can support multiple connections,
provided that each connection's streams feed unique channels.

Argument Syntax
---------------

**chans**

Channel specification can use any of the following options:

1. A comma-separated String where each pattern follows the syntax NET.STA.LOC.CHA.DFLAG, e.g. UW.TDH..EHZ.D. Use "?" to match any single character.
2. An Array{String,1} with one pattern per entry, following the above syntax.
3. The name of a configuration text file, with one channel pattern per line; see :ref:`Channel Configuration File syntax<ccfg>`.

| **patts**
| Data selection patterns. See SeedLink documentation; syntax is identical.
|
| **KWs**
| Standard keywords: fmt, opts, q, si, to, v, w, y
| Standard SL keywords: gap, kai, mode, port, refresh, safety, x\_on\_err

Special Rules
-------------

1. SeedLink follows unusual rules for wild cards in ``sta`` and ``patts``:
    a. ``*`` is not a valid SeedLink wild card.
    b. The LOC and CHA fields can be left blank in ``sta`` to select all locations and channels.
2. DO NOT feed one data channel with multiple SeedLink streams. This can have severe consequences:
    a. A channel fed by multiple live streams will have many small time sequences out of order. ``merge!`` is not guaranteed to fix it.
    b. SeedLink will almost certainly crash.
    c. Your data may be corrupted.
    d. The Julia interpreter can freeze, requiring ``kill -9`` on the process.
    e. This is not an "issue". There will never be a workaround. It's what happens when one intentionally causes TCP congestion on one's own machine while writing to open data streams in memory. Hint: don't do this.

Special Functions
-----------------
* ``close(S.c[i])`` ends SeedLink connection ``i``.
* ``!deleteat(S.c, i)`` removes a handle to closed SeedLink connection ``i``.


.. function:: T = has_sta(C, src)

Check that station identifiers ``C`` exist at ``src``. The syntax of ``C`` can be truncated to network and station ids (NN.SSSSS) or a standard id (NN.SSSSS.LL.CC), but only matches on station and network codes.

``SeedLink!(... safety=0x01)`` calls ``has_sta`` before initiating a SeedLink connection.

.. function:: T = has_live_stream(C, src, gap=G)


Check that streams with channel identifiers ``C`` have data < ``G`` seconds old at ``src``. Returns a Boolean array with one entry per channel id.

``SeedLink!(... safety=0x02)`` calls ``has_live_stream`` before initiating a SeedLink connection.
