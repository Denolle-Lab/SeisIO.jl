..    include:: <isonum.txt>
..    include:: <isogrk1.txt>
..    include:: <isoamsr.txt>
..    module:: sphinx.ext.mathbase

.. _seisdata:

***************
:mod:`SeisData`
***************
SeisData is a minimalist class (type) designed for discretely sampled sequential signals, including (but not limited to) time-series data. It can hold both regularly sampled (time series) data and irregularly sampled measurements.

SeisData and SeisObj instances can be manipulated using standard Julia commands. The rest of this section explains this functionality in detail.


Creating Data Containers
========================
* ``S = SeisData()``

  initialize an empty SeisData container

* ``S = SeisObj()``

  initialize a new SeisObj container

* ``S = SeisData(s1, s2, s3)``

  create a SeisData container by merging s1, s2, s3.

When using the third syntax, if a merge variable isn't of class SeisData or SeisObj, it's ignored with a warning.

Fields can be initialized by name when a new SeisObj container is created.

* ``S = SeisObj(name="DEAD CHANNEL", fs=50)``

  initialize a SeisObj with name "DEAD CHANNEL", fs = 50.



Adding Data
===========
``+`` (the addition operator) is the standard way to add data channels. Addition attempts to merge data with matching channel IDs. Channels with unique IDs are simply assigned as new channels. ``merge!`` and ``+`` work identically on SeisData and SeisObj containers.

Data can be merged from any file read or data acquisition command that outputs a SeisData or SeisObj structure.

* ``S += r_sac(sacfile.sac)``

  merge data from sacfile.sac into S in place.

* ``T = S + SeedLink("myconfig", t=300)``

  merge 300 seconds of SeedLink data into S using config file "myconfig".

* In a merge operation, pairs of data `x`:sub:`i`, `x`:sub:`j` with overlapping time stamps (i.e. `t`:sub:`i` - `t`:sub:`j` |le| 1/fs) are *averaged*.


Appending without merging
-------------------------
``push!`` adds channels without attempting to merge.

* ``push!(S,T)``

  assign each channel in T to a new channel in S, even if it creates redundant channel IDs.

* ``push!(S,S)``

  append a duplicate of each channel in S to S.



Deleting Data
=============
``-`` (the subtraction operator) is the standard way to delete unwanted data channels. It's generally safest to use e.g. ``T = S - i``, but in-place deletion (e.g. ``S -= i``) is valid.

* ``S - k``

  * If k is an integer, channel k is deleted from S.

  * If k is a string, all channels whose names and ids match k are deleted.

  * If k is a SeisObj instance, all channels from S with the same id as k are deleted.

* ``deleteat!(S,i)``

  identical to ``S-=i`` for an integer i.



Index, Search, Sort
===================
Individual channels in a SeisData container can be accessed by channel index; for example, ``S[3]`` returns channel 3. Indexing a single channel outputs a SeisObj instance; indexing a range of channels outputs a new SeisData object.

The same syntax can be used to ovewrwrite data by channel (or channel range). For example, ``S[2] = T``, where T is a SeisObj instance, replaces the second channel of S with T.

Multiple channels in a SeisData container S can be overwritten with another SeisData container T using ``setindex!(S, T, I)``; the last input is a range of indices.

*Julia is a "pass by reference" language*. The precaution here is best illustrated by example. If one uses index assignment, e.g. ``S[2] = T``, subsequent changes to T also modify S[2].


Search, Sort, Equality
----------------------
The ``sort!`` command sorts channels by id in lexicographical order.

The following commands offer search functionality:

* ``findid(S,id)``: search for channels with S.id == id.

* ``findid(S,T)``: find all channels with S.id == T.id.

* ``hasid(S,id)``: true if S has a channel id that matches id.

* ``hasname(S,name)``: true if S has a channel name that matches name.

* ``findname(S,name)``: search for channels with S.name == name.

The following commands offer tests for equality:

* ``samehdr(S,T)``: true if S, T contain identical header information (``id, fs, gain, loc, resp``).

* ``==`` and ``isequal`` test for equality.



Utility Functions
=================
* ``note``: Add a timestamped note.

* ``plotseis``: Plot time-aligned data. Time series data are represented by straight lines; irregularly sampled data (``fs=0``) use normalized stem plots.

* ``prune!, prune``: Merges channels with redundant header fields.

* ``purge!, purge``: Deletes all channels with no data (defined for any channel i as isempty(S.x[i]) == true).

* ``sync!, sync``: Synchronize time windows for all channels and fill time gaps.  Calls ungap at invocation.

* ``ungap!, ungap``: Fill all time gaps in each channel of regularly sampled data.



Native File I/O
===============
Use ``rseis`` and ``wseis`` to read and save in native format. ``writesac(S)`` saves trace data in ``S`` to single-channel `SAC <sac>` files.

Advantages/Disadvantages of SAC

+ Very widely used.

- Single-precision format.

- Rudimentary time stamping.

The last point merits brief discussion. Time stamps aren't written to SAC by default (you can change this by passing ``ts=true`` as a keyword). If you write time stamps to SAC files, the data are treated by SAC itself as unevenly spaced, generic `x-y` data (`LEVEN=0, IFTYPE=4`). However, the behavior of third-party SAC readers is less predictable: timestamped data *might* be loaded as the real part of a complex time series, with the time values themselves as the imaginary part...or, perhaps, the other way around.
